/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
##--------------------------------------------------------------------------------------------------------
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $jdbc = $jdbcFactory.getInstance($entity) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

import java.sql.ResultSet;
import java.sql.SQLException;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.dao.${entity.name}DAO;
import ${ROOT_PKG}.dao.impl.spring.commons.GenericDAO;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * ${entity.name} DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
@Repository
public class ${entity.name}DAOImplSpring extends GenericDAO<${entity.name}> implements ${entity.name}DAO {

	private final static String SQL_SELECT = 
		"$jdbc.sqlSelect";

#if ( $entity.hasAutoIncrementedKey() )
	// NB : This entity has an auto-incremented primary key : "$entity.autoincrementedKeyAttribute.databaseName"
	private final static String AUTO_INCREMENTED_COLUMN = "$entity.autoincrementedKeyAttribute.databaseName";

	private final static int[] SQL_INSERT_TYPES = new int[] {
#foreach( $attribute in $jdbc.attributesForInsert )
			java.sql.Types.${attribute.jdbcTypeName} #if( $foreach.hasNext ),#end  // "$attribute.databaseName" : $attribute.databaseTypeWithSize - $attribute.fullType
#end
	};
#end

	private final static String SQL_INSERT = 
		"$jdbc.sqlInsert";

	private final static String SQL_UPDATE = 
#if ( $entity.nonKeyAttributesCount > 0 )
		"$jdbc.sqlUpdate";
#else
		"NO UPDATE (NO DATA)";
#end

	private final static String SQL_DELETE = 
		"$jdbc.sqlDelete";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from ${entity.databaseTable}";

	private final static String SQL_COUNT = 
		"$jdbc.sqlExists";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ${entity.name}DAOImplSpring() {
#if ( $entity.hasAutoIncrementedKey() )
		super(AUTO_INCREMENTED_COLUMN, SQL_INSERT_TYPES);
#else
		super();
#end
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public ${entity.name} find( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		Object[] primaryKey = new Object[] { $fn.argumentsList($jdbc.attributesForPrimaryKey) };
		return super.doSelect(primaryKey);		
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean load( ${entity.name} $uncapitalizedEntityName ) {
		return super.doSelect($uncapitalizedEntityName) ;
	}
	
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
#if ( $entity.hasAutoIncrementedKey() )
#set( $attrib = $entity.autoincrementedKeyAttribute )
	public $attrib.type insert(${entity.name} ${uncapitalizedEntityName}) {
		Long key = super.doInsertAutoIncr($uncapitalizedEntityName);
#if ( $attrib.isByteType() )
		return key.byteValue();
#elseif ( $attrib.isShortType() )
		return key.shortValue();
#elseif ( $attrib.isIntegerType() )
		return key.intValue();
#elseif ( $attrib.isLongType() )
		return key.longValue();
#else
		return key.longValue();
#end
	}
#else
	public void insert(${entity.name} ${uncapitalizedEntityName}) {
		super.doInsert($uncapitalizedEntityName);
	}	
#end

#if ( $entity.nonKeyAttributesCount > 0 )
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int update(${entity.name} $uncapitalizedEntityName) {
		return super.doUpdate($uncapitalizedEntityName);
	}	
#end

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		Object[] primaryKey = new Object[] { $fn.argumentsList($jdbc.attributesForPrimaryKey) };
		return super.doDelete(primaryKey);		
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public int delete( ${entity.name} $uncapitalizedEntityName ) {
		return super.doDelete($uncapitalizedEntityName);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( $fn.argumentsListWithType( $jdbc.attributesForPrimaryKey ) ) {
		Object[] primaryKey = new Object[] { $fn.argumentsList($jdbc.attributesForPrimaryKey) };
		return super.doExists(primaryKey);
	}
    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public boolean exists( ${entity.name} $uncapitalizedEntityName ) {
		return super.doExists($uncapitalizedEntityName);
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * DAO interface implementation
	 */
	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(${entity.name} $uncapitalizedEntityName)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $entity.attributes )
#if ( $attribute.isAutoIncremented() )
			// "${attribute.databaseName}" is auto-incremented => no set in insert		
#end#end
#foreach( $attribute in $jdbc.attributesForInsert )
			${uncapitalizedEntityName}.${attribute.getter}() #if( $foreach.hasNext ),#end // "$attribute.databaseName" : $attribute.fullType
#end
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(${entity.name} $uncapitalizedEntityName) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
#foreach( $attribute in $jdbc.attributesForUpdate )
			${uncapitalizedEntityName}.${attribute.getter}(), // "$attribute.databaseName" : $attribute.fullType
#end
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			${uncapitalizedEntityName}.${attribute.getter}() #if( $foreach.hasNext ),#end // "$attribute.databaseName" : $attribute.fullType
#end
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(${entity.name} $uncapitalizedEntityName)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			${uncapitalizedEntityName}.${attribute.getter}() #if( $foreach.hasNext ),#end // "$attribute.databaseName" : $attribute.fullType
#end
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<${entity.name}> getRowMapper(${entity.name} o)  {
		//--- RowMapper to populate the given bean instance
		return new ${entity.name}RowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<${entity.name}> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new ${entity.name}RowMapper( new ${entity.name}() ) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param $uncapitalizedEntityName
	 * @throws SQLException
	 */
	private void populateBean(ResultSet rs, ${entity.name} $uncapitalizedEntityName) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
#foreach( $attribute in $jdbc.attributesForSelect)
		${uncapitalizedEntityName}.${attribute.setter}(rs.$jdbc.resultSetGetter($attribute)("$attribute.databaseName")); // $attribute.fullType
#if ( $attribute.isNumberType() && $attribute.isPrimitiveType() == false )
		if ( rs.wasNull() ) { ${uncapitalizedEntityName}.${attribute.setter}(null); }; // not primitive number => keep null value if any
#end
#end
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class ${entity.name}RowMapper implements RowMapper<${entity.name}> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private final ${entity.name} bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		${entity.name}RowMapper(${entity.name} bean) {
			this.bean = bean ;
		}
		
		@Override
		public ${entity.name} mapRow(ResultSet rs, int rowNum) throws SQLException {
			populateBean(rs, this.bean);
			return this.bean;
		}
	}
}
